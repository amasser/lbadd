package converter_test

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/tomarrell/lbadd/internal/engine/converter"
)

func TestBool(t *testing.T) {
	t.Run("target=byte", func(t *testing.T) {
		assert := assert.New(t)
		assert.Equal(byte(0x00), converter.BoolToByte(false))
		assert.Equal(byte(255), converter.BoolToByte(true))
	})
	t.Run("target=bytearray", func(t *testing.T) {
		assert := assert.New(t)
		assert.Equal([1]byte{0x00}, converter.BoolToByteArray(false))
		assert.Equal([1]byte{255}, converter.BoolToByteArray(true))
	})
	t.Run("target=byteslice", func(t *testing.T) {
		assert := assert.New(t)
		assert.Equal([]byte{0x00}, converter.BoolToByteSlice(false))
		assert.Equal([]byte{255}, converter.BoolToByteSlice(true))
	})
}

func TestIntegral(t *testing.T) {
	t.Run("cardinality=16bit", func(t *testing.T) {
		t.Run("target=bytearray", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([2]byte{0x00, 0x00}, converter.Uint16ToByteArray(0))
			assert.Equal([2]byte{0xCA, 0xFE}, converter.Uint16ToByteArray(0xCAFE))
			assert.Equal([2]byte{0x00, 0xAB}, converter.Uint16ToByteArray(0xAB))
			assert.Equal([2]byte{0xFF, 0xFF}, converter.Uint16ToByteArray(0xFFFF))
		})
		t.Run("target=byteslice", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([]byte{0x00, 0x00}, converter.Uint16ToByteSlice(0))
			assert.Equal([]byte{0xCA, 0xFE}, converter.Uint16ToByteSlice(0xCAFE))
			assert.Equal([]byte{0x00, 0xAB}, converter.Uint16ToByteSlice(0xAB))
			assert.Equal([]byte{0xFF, 0xFF}, converter.Uint16ToByteSlice(0xFFFF))
		})
	})
	t.Run("cardinality=32bit", func(t *testing.T) {
		t.Run("target=bytearray", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([4]byte{0x00, 0x00, 0x00, 0x00}, converter.Uint32ToByteArray(0))
			assert.Equal([4]byte{0xCA, 0xFE, 0xBA, 0xBE}, converter.Uint32ToByteArray(0xCAFEBABE))
			assert.Equal([4]byte{0x00, 0x00, 0x00, 0xAB}, converter.Uint32ToByteArray(0xAB))
			assert.Equal([4]byte{0xFF, 0xFF, 0xFF, 0xFF}, converter.Uint32ToByteArray(0xFFFFFFFF))
		})
		t.Run("target=byteslice", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([]byte{0x00, 0x00, 0x00, 0x00}, converter.Uint32ToByteSlice(0))
			assert.Equal([]byte{0xCA, 0xFE, 0xBA, 0xBE}, converter.Uint32ToByteSlice(0xCAFEBABE))
			assert.Equal([]byte{0x00, 0x00, 0x00, 0xAB}, converter.Uint32ToByteSlice(0xAB))
			assert.Equal([]byte{0xFF, 0xFF, 0xFF, 0xFF}, converter.Uint32ToByteSlice(0xFFFFFFFF))
		})
	})
	t.Run("cardinality=64bit", func(t *testing.T) {
		t.Run("target=bytearray", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([8]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Uint64ToByteArray(0))
			assert.Equal([8]byte{0xCA, 0xFE, 0xBA, 0xBE, 0xDA, 0xDE, 0xFA, 0xBE}, converter.Uint64ToByteArray(0xCAFEBABEDADEFABE))
			assert.Equal([8]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAB}, converter.Uint64ToByteArray(0xAB))
			assert.Equal([8]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, converter.Uint64ToByteArray(0xFFFFFFFFFFFFFFFF))
		})
		t.Run("target=byteslice", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Uint64ToByteSlice(0))
			assert.Equal([]byte{0xCA, 0xFE, 0xBA, 0xBE, 0xDA, 0xDE, 0xFA, 0xBE}, converter.Uint64ToByteSlice(0xCAFEBABEDADEFABE))
			assert.Equal([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAB}, converter.Uint64ToByteSlice(0xAB))
			assert.Equal([]byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, converter.Uint64ToByteSlice(0xFFFFFFFFFFFFFFFF))
		})
	})
}

func TestFractal(t *testing.T) {
	t.Run("cardinality=32bit", func(t *testing.T) {
		t.Run("target=bytearray", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([4]byte{0x00, 0x00, 0x00, 0x00}, converter.Float32ToByteArray(0))
			assert.Equal([4]byte{0x4f, 0x4a, 0xfe, 0xbb}, converter.Float32ToByteArray(0xCAFEBABE))
			assert.Equal([4]byte{0x43, 0x2b, 0x00, 0x00}, converter.Float32ToByteArray(0xAB))
			assert.Equal([4]byte{0x4f, 0x80, 0x00, 0x00}, converter.Float32ToByteArray(0xFFFFFFFF))
		})
		t.Run("target=byteslice", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([]byte{0x00, 0x00, 0x00, 0x00}, converter.Float32ToByteSlice(0))
			assert.Equal([]byte{0x4f, 0x4a, 0xfe, 0xbb}, converter.Float32ToByteSlice(0xCAFEBABE))
			assert.Equal([]byte{0x43, 0x2b, 0x00, 0x00}, converter.Float32ToByteSlice(0xAB))
			assert.Equal([]byte{0x4f, 0x80, 0x00, 0x00}, converter.Float32ToByteSlice(0xFFFFFFFF))
		})
	})
	t.Run("cardinality=64bit", func(t *testing.T) {
		t.Run("target=bytearray", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([8]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Float64ToByteArray(0))
			assert.Equal([8]byte{0x43, 0xe9, 0x5f, 0xd7, 0x57, 0xdb, 0x5b, 0xdf}, converter.Float64ToByteArray(0xCAFEBABEDADEFABE))
			assert.Equal([8]byte{0x40, 0x65, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Float64ToByteArray(0xAB))
			assert.Equal([8]byte{0x43, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Float64ToByteArray(0xFFFFFFFFFFFFFFFF))
		})
		t.Run("target=byteslice", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Float64ToByteSlice(0))
			assert.Equal([]byte{0x43, 0xe9, 0x5f, 0xd7, 0x57, 0xdb, 0x5b, 0xdf}, converter.Float64ToByteSlice(0xCAFEBABEDADEFABE))
			assert.Equal([]byte{0x40, 0x65, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Float64ToByteSlice(0xAB))
			assert.Equal([]byte{0x43, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Float64ToByteSlice(0xFFFFFFFFFFFFFFFF))
		})
	})
}

func TestComplex(t *testing.T) {
	t.Run("cardinality=64bit", func(t *testing.T) {
		t.Run("target=bytearray", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([8]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex64ToByteArray(0+0i))
			assert.Equal([8]byte{0x41, 0x60, 0x00, 0x00, 0x41, 0x40, 0x00, 0x00}, converter.Complex64ToByteArray(14+12i))
			assert.Equal([8]byte{0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex64ToByteArray(4+0i))
			assert.Equal([8]byte{0x4f, 0x80, 0x00, 0x00, 0x4f, 0x80, 0x00, 0x00}, converter.Complex64ToByteArray(0xFFFFFFFF+0xFFFFFFFFi))
		})
		t.Run("target=byteslice", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex64ToByteSlice(0+0i))
			assert.Equal([]byte{0x41, 0x60, 0x00, 0x00, 0x41, 0x40, 0x00, 0x00}, converter.Complex64ToByteSlice(14+12i))
			assert.Equal([]byte{0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex64ToByteSlice(4+0i))
			assert.Equal([]byte{0x4f, 0x80, 0x00, 0x00, 0x4f, 0x80, 0x00, 0x00}, converter.Complex64ToByteSlice(0xFFFFFFFF+0xFFFFFFFFi))
		})
	})
	t.Run("cardinality=128bit", func(t *testing.T) {
		t.Run("target=bytearray", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([16]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex128ToByteArray(0+0i))
			assert.Equal([16]byte{0x40, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex128ToByteArray(14+12i))
			assert.Equal([16]byte{0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex128ToByteArray(4+0i))
			assert.Equal([16]byte{0x43, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex128ToByteArray(0xFFFFFFFFFFFFFFFF+0xFFFFFFFFFFFFFFFFi))
		})
		t.Run("target=byteslice", func(t *testing.T) {
			assert := assert.New(t)
			assert.Equal([]byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex128ToByteSlice(0+0i))
			assert.Equal([]byte{0x40, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex128ToByteSlice(14+12i))
			assert.Equal([]byte{0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex128ToByteSlice(4+0i))
			assert.Equal([]byte{0x43, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, converter.Complex128ToByteSlice(0xFFFFFFFFFFFFFFFF+0xFFFFFFFFFFFFFFFFi))
		})
	})
}

func TestVariable(t *testing.T) {
	t.Run("type=string", func(t *testing.T) {
		assert := assert.New(t)
		assert.Equal([]byte{}, converter.StringToByteSlice(""))
		assert.Equal([]byte{0x61, 0x62, 0x63, 0x64}, converter.StringToByteSlice("abcd"))
	})
}
