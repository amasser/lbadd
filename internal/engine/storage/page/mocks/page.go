// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	page "github.com/tomarrell/lbadd/internal/engine/storage/page"
)

// Page is an autogenerated mock type for the Page type
type Page struct {
	mock.Mock
}

// Cell provides a mock function with given fields: _a0
func (_m *Page) Cell(_a0 []byte) (page.Cell, bool) {
	ret := _m.Called(_a0)

	var r0 page.Cell
	if rf, ok := ret.Get(0).(func([]byte) page.Cell); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(page.Cell)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func([]byte) bool); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Cells provides a mock function with given fields:
func (_m *Page) Cells() []page.Cell {
	ret := _m.Called()

	var r0 []page.Cell
	if rf, ok := ret.Get(0).(func() []page.Cell); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]page.Cell)
		}
	}

	return r0
}

// ClearDirty provides a mock function with given fields:
func (_m *Page) ClearDirty() {
	_m.Called()
}

// Delete provides a mock function with given fields: _a0
func (_m *Page) Delete(_a0 []byte) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dirty provides a mock function with given fields:
func (_m *Page) Dirty() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Header provides a mock function with given fields: _a0
func (_m *Page) Header(_a0 page.Header) interface{} {
	ret := _m.Called(_a0)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(page.Header) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MarkDirty provides a mock function with given fields:
func (_m *Page) MarkDirty() {
	_m.Called()
}

// StoreCell provides a mock function with given fields: _a0
func (_m *Page) StoreCell(_a0 page.Cell) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(page.Cell) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
